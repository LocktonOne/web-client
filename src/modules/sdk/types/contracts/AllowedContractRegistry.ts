/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AllowedContractRegistryInterface extends utils.Interface {
  functions: {
    "ADD_CONTRACT_PERMISSION()": FunctionFragment;
    "ALLOWED_CONTRACT_REGISTRY_RESOURCE()": FunctionFragment;
    "SWITCH_FLAG_PERMISSION()": FunctionFragment;
    "addAllowedContract(bytes32)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "isAllowedToDeploy(bytes32)": FunctionFragment;
    "isDeployed(bytes32)": FunctionFragment;
    "masterAccess()": FunctionFragment;
    "setDependencies(address,bytes)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toggleDeployedFlag(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADD_CONTRACT_PERMISSION"
      | "ALLOWED_CONTRACT_REGISTRY_RESOURCE"
      | "SWITCH_FLAG_PERMISSION"
      | "addAllowedContract"
      | "getInjector"
      | "isAllowedToDeploy"
      | "isDeployed"
      | "masterAccess"
      | "setDependencies"
      | "setInjector"
      | "supportsInterface"
      | "toggleDeployedFlag"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADD_CONTRACT_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALLOWED_CONTRACT_REGISTRY_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWITCH_FLAG_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedContract",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToDeploy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "masterAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setInjector", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDeployedFlag",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADD_CONTRACT_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ALLOWED_CONTRACT_REGISTRY_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWITCH_FLAG_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeployed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDeployedFlag",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AllowedContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AllowedContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADD_CONTRACT_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    ALLOWED_CONTRACT_REGISTRY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SWITCH_FLAG_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    addAllowedContract(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { injector_: string }>;

    isAllowedToDeploy(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDeployed(hash_: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    masterAccess(overrides?: CallOverrides): Promise<[string]>;

    setDependencies(
      registryAddress_: string,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setInjector(
      injector_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toggleDeployedFlag(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ADD_CONTRACT_PERMISSION(overrides?: CallOverrides): Promise<string>;

  ALLOWED_CONTRACT_REGISTRY_RESOURCE(
    overrides?: CallOverrides
  ): Promise<string>;

  SWITCH_FLAG_PERMISSION(overrides?: CallOverrides): Promise<string>;

  addAllowedContract(
    hash_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  isAllowedToDeploy(
    hash_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDeployed(hash_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  masterAccess(overrides?: CallOverrides): Promise<string>;

  setDependencies(
    registryAddress_: string,
    arg1: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setInjector(
    injector_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toggleDeployedFlag(
    hash_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADD_CONTRACT_PERMISSION(overrides?: CallOverrides): Promise<string>;

    ALLOWED_CONTRACT_REGISTRY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<string>;

    SWITCH_FLAG_PERMISSION(overrides?: CallOverrides): Promise<string>;

    addAllowedContract(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    isAllowedToDeploy(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDeployed(hash_: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    masterAccess(overrides?: CallOverrides): Promise<string>;

    setDependencies(
      registryAddress_: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(injector_: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toggleDeployedFlag(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ADD_CONTRACT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    ALLOWED_CONTRACT_REGISTRY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SWITCH_FLAG_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedContract(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedToDeploy(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDeployed(hash_: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    masterAccess(overrides?: CallOverrides): Promise<BigNumber>;

    setDependencies(
      registryAddress_: string,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setInjector(
      injector_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleDeployedFlag(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADD_CONTRACT_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ALLOWED_CONTRACT_REGISTRY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWITCH_FLAG_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAllowedContract(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedToDeploy(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeployed(
      hash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterAccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDependencies(
      registryAddress_: string,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setInjector(
      injector_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleDeployedFlag(
      hash_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
